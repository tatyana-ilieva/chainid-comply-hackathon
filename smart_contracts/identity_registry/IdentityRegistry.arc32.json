{
    "hints": {
        "register_identity(address,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_identity(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_total_verified_users()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_admin(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause_contract()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unpause_contract()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_admin()address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_paused()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "contract_paused": {
                    "type": "bytes",
                    "key": "contract_paused"
                },
                "total_verified_users": {
                    "type": "uint64",
                    "key": "total_verified_users"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "IdentityRegistry",
        "desc": "\n    ChainID+Comply Identity Registry Smart Contract\n    \n    Simple version for hackathon MVP:\n    - Stores identity verification status\n    - Tracks KYC verification levels\n    - Admin management\n    ",
        "methods": [
            {
                "name": "register_identity",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "User's Algorand address"
                    },
                    {
                        "type": "uint64",
                        "name": "verification_level",
                        "desc": "1=Basic, 2=Enhanced, 3=Premium KYC"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "True if registration successful"
                },
                "desc": "Register a user's identity with verification level"
            },
            {
                "name": "verify_identity",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Address to check"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "True if verified"
                },
                "desc": "Check if a user is verified (simplified for MVP)"
            },
            {
                "name": "get_total_verified_users",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get total number of verified users"
            },
            {
                "name": "set_admin",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin",
                        "desc": "New admin address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "True if successful"
                },
                "desc": "Transfer admin rights (current admin only)"
            },
            {
                "name": "pause_contract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Pause contract (admin only)"
            },
            {
                "name": "unpause_contract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Unpause contract (admin only)"
            },
            {
                "name": "get_admin",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "address"
                },
                "desc": "Get current admin address"
            },
            {
                "name": "is_paused",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Check if contract is paused"
            },
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Simple test method"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}