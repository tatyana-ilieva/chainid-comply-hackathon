{
  "version": 3,
  "sources": [
    "contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBQ;AAA2B;;AAA3B;AACA;;AAAkC;AAAlC;AACA;AAA6B;;AAA7B;AAnBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AA+GK;;AAAA;AAAA;AAAA;;AAAA;AA/GL;;;AAAA;;;AA+GK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAxEL;;;AAwEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;;;AAAA;AAqBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBL;;AAAA;;;;;;;;;AAqBA;;;AAiBmB;AAAA;AAAA;AAAA;AAAJ;;AAAA;AAAP;AAGO;;AAAA;;;AAA4B;;AAAsB;;AAAtB;AAA5B;;;;AAAP;AAMgB;AAAA;;AAAA;AAAA;AACkC;AAAhB;AAAlC;;AAAA;AAAA;AAEO;AAAP;;;;;AAoBO;AAAA;;AAAA;AAAA;AAAP;AAER;;;AAW6B;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACA;AAAA;;AAAA;AACO;AAAP;AAKqB;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACA;AAA6B;AAA7B;AACO;AAAP;AAKqB;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACA;AAA6B;;AAA7B;AACO;AAAP;AAKO;AAAA;AAAA;AAAA;AAAP;AAKO;AAAA;AAAA;AAAA;AAAP;AAER;;;AAGe;;;;;;;;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"admin\" \"contract_paused\" 0x80 \"total_verified_users\" 0x00"
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "64": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "65": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "materialized_values%0#0"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "op": "bytec 4 // \"total_verified_users\"",
      "defined_out": [
        "\"total_verified_users\""
      ],
      "stack_out": [
        "\"total_verified_users\""
      ]
    },
    "70": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"total_verified_users\"",
        "0"
      ],
      "stack_out": [
        "\"total_verified_users\"",
        "0"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "bytec_2 // \"contract_paused\"",
      "defined_out": [
        "\"contract_paused\""
      ],
      "stack_out": [
        "\"contract_paused\""
      ]
    },
    "73": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "\"contract_paused\"",
        "0x00"
      ],
      "stack_out": [
        "\"contract_paused\"",
        "0x00"
      ]
    },
    "75": {
      "op": "app_global_put",
      "stack_out": []
    },
    "76": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "78": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "81": {
      "op": "pushbytess 0x5d47a96c 0xe0c27b0a 0xcfd1392a 0xd7f42674 0x9b1dc48b 0x6af78916 0x346b3dbc 0x01b19a5c 0x02bece11 // method \"register_identity(address,uint64)bool\", method \"verify_identity(address)bool\", method \"get_total_verified_users()uint64\", method \"set_admin(address)bool\", method \"pause_contract()bool\", method \"unpause_contract()bool\", method \"get_admin()address\", method \"is_paused()bool\", method \"hello(string)string\"",
      "defined_out": [
        "Method(get_admin()address)",
        "Method(get_total_verified_users()uint64)",
        "Method(hello(string)string)",
        "Method(is_paused()bool)",
        "Method(pause_contract()bool)",
        "Method(register_identity(address,uint64)bool)",
        "Method(set_admin(address)bool)",
        "Method(unpause_contract()bool)",
        "Method(verify_identity(address)bool)"
      ],
      "stack_out": [
        "Method(register_identity(address,uint64)bool)",
        "Method(verify_identity(address)bool)",
        "Method(get_total_verified_users()uint64)",
        "Method(set_admin(address)bool)",
        "Method(pause_contract()bool)",
        "Method(unpause_contract()bool)",
        "Method(get_admin()address)",
        "Method(is_paused()bool)",
        "Method(hello(string)string)"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_admin()address)",
        "Method(get_total_verified_users()uint64)",
        "Method(hello(string)string)",
        "Method(is_paused()bool)",
        "Method(pause_contract()bool)",
        "Method(register_identity(address,uint64)bool)",
        "Method(set_admin(address)bool)",
        "Method(unpause_contract()bool)",
        "Method(verify_identity(address)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(register_identity(address,uint64)bool)",
        "Method(verify_identity(address)bool)",
        "Method(get_total_verified_users()uint64)",
        "Method(set_admin(address)bool)",
        "Method(pause_contract()bool)",
        "Method(unpause_contract()bool)",
        "Method(get_admin()address)",
        "Method(is_paused()bool)",
        "Method(hello(string)string)",
        "tmp%2#0"
      ]
    },
    "131": {
      "op": "match main_register_identity_route@5 main_verify_identity_route@6 main_get_total_verified_users_route@7 main_set_admin_route@8 main_pause_contract_route@9 main_unpause_contract_route@10 main_get_admin_route@11 main_is_paused_route@12 main_hello_route@13",
      "stack_out": []
    },
    "151": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "block": "main_hello_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "159": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "160": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "163": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.hello",
      "op": "callsub hello",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "169": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "170": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "172": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "177": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "180": {
      "op": "log",
      "stack_out": []
    },
    "181": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "return",
      "stack_out": []
    },
    "183": {
      "block": "main_is_paused_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "185": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "190": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.is_paused",
      "op": "callsub is_paused",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "193": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "0x151f7c75"
      ]
    },
    "194": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%49#0"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": []
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_get_admin_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "206": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.get_admin",
      "op": "callsub get_admin",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "209": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0x151f7c75"
      ]
    },
    "210": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%43#0"
      ]
    },
    "211": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "212": {
      "op": "log",
      "stack_out": []
    },
    "213": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "return",
      "stack_out": []
    },
    "215": {
      "block": "main_unpause_contract_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "217": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "218": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "219": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "221": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "222": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.unpause_contract",
      "op": "callsub unpause_contract",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "225": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "0x151f7c75"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%37#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "228": {
      "op": "log",
      "stack_out": []
    },
    "229": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "block": "main_pause_contract_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "233": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "238": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.pause_contract",
      "op": "callsub pause_contract",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "241": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "244": {
      "op": "log",
      "stack_out": []
    },
    "245": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_set_admin_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "257": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.set_admin",
      "op": "callsub set_admin",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "260": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "261": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "263": {
      "op": "log",
      "stack_out": []
    },
    "264": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "return",
      "stack_out": []
    },
    "266": {
      "block": "main_get_total_verified_users_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "268": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "269": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "270": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "272": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "273": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.get_total_verified_users",
      "op": "callsub get_total_verified_users",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "276": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "277": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "280": {
      "op": "log",
      "stack_out": []
    },
    "281": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "282": {
      "op": "return",
      "stack_out": []
    },
    "283": {
      "block": "main_verify_identity_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "285": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "286": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "287": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "289": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "290": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "297": {
      "op": "log",
      "stack_out": []
    },
    "298": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "299": {
      "op": "return",
      "stack_out": []
    },
    "300": {
      "block": "main_register_identity_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "302": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "303": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "304": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "306": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "307": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "310": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "313": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ]
    },
    "314": {
      "callsub": "smart_contracts.identity_registry.contract.IdentityRegistry.register_identity",
      "op": "callsub register_identity",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "317": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "318": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "319": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "320": {
      "op": "log",
      "stack_out": []
    },
    "321": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "325": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "328": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "330": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "331": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "332": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "return",
      "stack_out": []
    },
    "334": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.register_identity",
      "params": {
        "user_address#0": "bytes",
        "verification_level#0": "uint64"
      },
      "block": "register_identity",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "337": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "338": {
      "op": "bytec_2 // \"contract_paused\"",
      "defined_out": [
        "\"contract_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_paused\""
      ]
    },
    "339": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "340": {
      "error": "check self.contract_paused exists",
      "op": "assert // check self.contract_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "341": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "343": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "344": {
      "error": "Contract paused",
      "op": "assert // Contract paused",
      "stack_out": []
    },
    "345": {
      "op": "frame_dig -1",
      "defined_out": [
        "verification_level#0 (copy)"
      ],
      "stack_out": [
        "verification_level#0 (copy)"
      ]
    },
    "347": {
      "op": "bz register_identity_bool_false@3",
      "stack_out": []
    },
    "350": {
      "op": "frame_dig -1",
      "stack_out": [
        "verification_level#0 (copy)"
      ]
    },
    "352": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "verification_level#0 (copy)"
      ],
      "stack_out": [
        "verification_level#0 (copy)",
        "3"
      ]
    },
    "354": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "355": {
      "op": "bz register_identity_bool_false@3",
      "stack_out": []
    },
    "358": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "359": {
      "block": "register_identity_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Invalid level",
      "op": "assert // Invalid level",
      "defined_out": [],
      "stack_out": []
    },
    "360": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "361": {
      "op": "bytec 4 // \"total_verified_users\"",
      "defined_out": [
        "\"total_verified_users\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_verified_users\""
      ]
    },
    "363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_count#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "current_count#0",
        "maybe_exists%1#0"
      ]
    },
    "364": {
      "error": "check self.total_verified_users exists",
      "op": "assert // check self.total_verified_users exists",
      "stack_out": [
        "current_count#0"
      ]
    },
    "365": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "current_count#0"
      ],
      "stack_out": [
        "current_count#0",
        "1"
      ]
    },
    "366": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "367": {
      "op": "bytec 4 // \"total_verified_users\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"total_verified_users\""
      ]
    },
    "369": {
      "op": "swap",
      "stack_out": [
        "\"total_verified_users\"",
        "materialized_values%0#0"
      ]
    },
    "370": {
      "op": "app_global_put",
      "stack_out": []
    },
    "371": {
      "op": "bytec_3 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "372": {
      "retsub": true,
      "op": "retsub"
    },
    "373": {
      "block": "register_identity_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "374": {
      "op": "b register_identity_bool_merge@4"
    },
    "377": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.get_total_verified_users",
      "params": {},
      "block": "get_total_verified_users",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "378": {
      "op": "bytec 4 // \"total_verified_users\"",
      "defined_out": [
        "\"total_verified_users\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_verified_users\""
      ]
    },
    "380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "381": {
      "error": "check self.total_verified_users exists",
      "op": "assert // check self.total_verified_users exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "382": {
      "retsub": true,
      "op": "retsub"
    },
    "383": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.set_admin",
      "params": {
        "new_admin#0": "bytes"
      },
      "block": "set_admin",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "386": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "387": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "388": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "389": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "390": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "393": {
      "error": "Only admin",
      "op": "assert // Only admin",
      "stack_out": []
    },
    "394": {
      "op": "bytec_1 // \"admin\"",
      "stack_out": [
        "\"admin\""
      ]
    },
    "395": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "new_admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "new_admin#0 (copy)"
      ]
    },
    "397": {
      "op": "app_global_put",
      "stack_out": []
    },
    "398": {
      "op": "bytec_3 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "399": {
      "retsub": true,
      "op": "retsub"
    },
    "400": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.pause_contract",
      "params": {},
      "block": "pause_contract",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "401": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "402": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "403": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "404": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "407": {
      "error": "Only admin",
      "op": "assert // Only admin",
      "stack_out": []
    },
    "408": {
      "op": "bytec_2 // \"contract_paused\"",
      "defined_out": [
        "\"contract_paused\""
      ],
      "stack_out": [
        "\"contract_paused\""
      ]
    },
    "409": {
      "op": "bytec_3 // 0x80",
      "defined_out": [
        "\"contract_paused\"",
        "0x80"
      ],
      "stack_out": [
        "\"contract_paused\"",
        "0x80"
      ]
    },
    "410": {
      "op": "app_global_put",
      "stack_out": []
    },
    "411": {
      "op": "bytec_3 // 0x80",
      "stack_out": [
        "0x80"
      ]
    },
    "412": {
      "retsub": true,
      "op": "retsub"
    },
    "413": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.unpause_contract",
      "params": {},
      "block": "unpause_contract",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "414": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "415": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "416": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "417": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "419": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "420": {
      "error": "Only admin",
      "op": "assert // Only admin",
      "stack_out": []
    },
    "421": {
      "op": "bytec_2 // \"contract_paused\"",
      "defined_out": [
        "\"contract_paused\""
      ],
      "stack_out": [
        "\"contract_paused\""
      ]
    },
    "422": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "\"contract_paused\"",
        "0x00"
      ],
      "stack_out": [
        "\"contract_paused\"",
        "0x00"
      ]
    },
    "424": {
      "op": "app_global_put",
      "stack_out": []
    },
    "425": {
      "op": "bytec_3 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "426": {
      "retsub": true,
      "op": "retsub"
    },
    "427": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.get_admin",
      "params": {},
      "block": "get_admin",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "428": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "429": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "430": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "431": {
      "retsub": true,
      "op": "retsub"
    },
    "432": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.is_paused",
      "params": {},
      "block": "is_paused",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "433": {
      "op": "bytec_2 // \"contract_paused\"",
      "defined_out": [
        "\"contract_paused\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_paused\""
      ]
    },
    "434": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "435": {
      "error": "check self.contract_paused exists",
      "op": "assert // check self.contract_paused exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "436": {
      "retsub": true,
      "op": "retsub"
    },
    "437": {
      "subroutine": "smart_contracts.identity_registry.contract.IdentityRegistry.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "440": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "449": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ]
    },
    "451": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "retsub": true,
      "op": "retsub"
    }
  }
}