{
    "name": "PaymentProcessor",
    "structs": {},
    "methods": [
        {
            "name": "set_identity_registry",
            "args": [
                {
                    "type": "uint64",
                    "name": "registry_app_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set the Identity Registry app ID (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "process_payment",
            "args": [
                {
                    "type": "address",
                    "name": "recipient",
                    "desc": "Address to receive payment"
                },
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "Amount in microAlgos"
                },
                {
                    "type": "string",
                    "name": "payment_type",
                    "desc": "\"reward\", \"tip\", \"subscription\", etc."
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if payment successful"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Process a micro-payment to verified user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_payments",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total number of payments processed",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_reward",
            "args": [
                {
                    "type": "address",
                    "name": "claimer",
                    "desc": "Address claiming reward"
                },
                {
                    "type": "uint64",
                    "name": "reward_amount",
                    "desc": "Amount to claim"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if claim successful"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim a reward (simplified for MVP)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_contract",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pause contract (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unpause_contract",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unpause contract (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_admin",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get admin address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_registry_app_id",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get connected Identity Registry app ID",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    ChainID+Comply Payment Processor Smart Contract\n    \n    Handles atomic micro-payments with compliance verification:\n    - Processes small payments/rewards\n    - Verifies user eligibility via Identity Registry\n    - Prevents double-spending\n    - Maintains payment audit trail\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "identity_registry_app_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lk"
                },
                "total_payments_processed": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcGF5bWVudHNfcHJvY2Vzc2Vk"
                },
                "contract_paused": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "Y29udHJhY3RfcGF1c2Vk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        376
                    ],
                    "errorMessage": "Amount must be positive"
                },
                {
                    "pc": [
                        384
                    ],
                    "errorMessage": "Amount too large (max 1 ALGO)"
                },
                {
                    "pc": [
                        373,
                        412
                    ],
                    "errorMessage": "Contract paused"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "Invalid amount"
                },
                {
                    "pc": [
                        182,
                        199,
                        215,
                        231,
                        247,
                        270,
                        287,
                        316
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        354,
                        442,
                        456
                    ],
                    "errorMessage": "Only admin"
                },
                {
                    "pc": [
                        423
                    ],
                    "errorMessage": "Reward too large (max 0.5 ALGO)"
                },
                {
                    "pc": [
                        341
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        185,
                        202,
                        218,
                        234,
                        250,
                        273,
                        290,
                        319
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        350,
                        438,
                        452,
                        467
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        369,
                        408
                    ],
                    "errorMessage": "check self.contract_paused exists"
                },
                {
                    "pc": [
                        473
                    ],
                    "errorMessage": "check self.identity_registry_app_id exists"
                },
                {
                    "pc": [
                        388,
                        399,
                        427
                    ],
                    "errorMessage": "check self.total_payments_processed exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIiAweDgwICJhZG1pbiIgImNvbnRyYWN0X3BhdXNlZCIgMHgwMCAiaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkIgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjIzLTI0CiAgICAvLyAjIEluaXRpYWxpemUKICAgIC8vIHNlbGYuYWRtaW4udmFsdWUgPSBBZGRyZXNzKEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MpCiAgICBieXRlY18zIC8vICJhZG1pbiIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToyNQogICAgLy8gc2VsZi5pZGVudGl0eV9yZWdpc3RyeV9hcHBfaWQudmFsdWUgPSBVSW50NjQoMCkgICMgV2lsbCBiZSBzZXQgbGF0ZXIKICAgIGJ5dGVjIDYgLy8gImlkZW50aXR5X3JlZ2lzdHJ5X2FwcF9pZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjI2CiAgICAvLyBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZC52YWx1ZSA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMSAvLyAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYuY29udHJhY3RfcGF1c2VkLnZhbHVlID0gQm9vbChGYWxzZSkKICAgIGJ5dGVjIDQgLy8gImNvbnRyYWN0X3BhdXNlZCIKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgYXBwX2dsb2JhbF9wdXQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFBheW1lbnRQcm9jZXNzb3IoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweDk4YWE1NDllIDB4NGQyMzYxY2EgMHg5NDg5ZDQyYSAweDRkM2JiYWIwIDB4OWIxZGM0OGIgMHg2YWY3ODkxNiAweDM0NmIzZGJjIDB4YzAyODcyNmUgLy8gbWV0aG9kICJzZXRfaWRlbnRpdHlfcmVnaXN0cnkodWludDY0KWJvb2wiLCBtZXRob2QgInByb2Nlc3NfcGF5bWVudChhZGRyZXNzLHVpbnQ2NCxzdHJpbmcpYm9vbCIsIG1ldGhvZCAiZ2V0X3RvdGFsX3BheW1lbnRzKCl1aW50NjQiLCBtZXRob2QgImNsYWltX3Jld2FyZChhZGRyZXNzLHVpbnQ2NClib29sIiwgbWV0aG9kICJwYXVzZV9jb250cmFjdCgpYm9vbCIsIG1ldGhvZCAidW5wYXVzZV9jb250cmFjdCgpYm9vbCIsIG1ldGhvZCAiZ2V0X2FkbWluKClhZGRyZXNzIiwgbWV0aG9kICJnZXRfcmVnaXN0cnlfYXBwX2lkKCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3NldF9pZGVudGl0eV9yZWdpc3RyeV9yb3V0ZUA1IG1haW5fcHJvY2Vzc19wYXltZW50X3JvdXRlQDYgbWFpbl9nZXRfdG90YWxfcGF5bWVudHNfcm91dGVANyBtYWluX2NsYWltX3Jld2FyZF9yb3V0ZUA4IG1haW5fcGF1c2VfY29udHJhY3Rfcm91dGVAOSBtYWluX3VucGF1c2VfY29udHJhY3Rfcm91dGVAMTAgbWFpbl9nZXRfYWRtaW5fcm91dGVAMTEgbWFpbl9nZXRfcmVnaXN0cnlfYXBwX2lkX3JvdXRlQDEyCgptYWluX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgUGF5bWVudFByb2Nlc3NvcihBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRfcmVnaXN0cnlfYXBwX2lkX3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjExOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3JlZ2lzdHJ5X2FwcF9pZAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfYWRtaW5fcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTE0CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfYWRtaW4KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdW5wYXVzZV9jb250cmFjdF9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToxMDcKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVucGF1c2VfY29udHJhY3QKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcGF1c2VfY29udHJhY3Rfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToxMDAKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHBhdXNlX2NvbnRyYWN0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NsYWltX3Jld2FyZF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojc2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFBheW1lbnRQcm9jZXNzb3IoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo3NgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGNsYWltX3Jld2FyZAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfdG90YWxfcGF5bWVudHNfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo3MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3RvdGFsX3BheW1lbnRzCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Byb2Nlc3NfcGF5bWVudF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjM2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFBheW1lbnRQcm9jZXNzb3IoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzYKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBwcm9jZXNzX3BheW1lbnQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0X2lkZW50aXR5X3JlZ2lzdHJ5X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MjkKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgUGF5bWVudFByb2Nlc3NvcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjI5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgc2V0X2lkZW50aXR5X3JlZ2lzdHJ5CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBQYXltZW50UHJvY2Vzc29yKEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE1CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wYXltZW50X3Byb2Nlc3Nvci5jb250cmFjdC5QYXltZW50UHJvY2Vzc29yLnNldF9pZGVudGl0eV9yZWdpc3RyeShyZWdpc3RyeV9hcHBfaWQ6IHVpbnQ2NCkgLT4gYnl0ZXM6CnNldF9pZGVudGl0eV9yZWdpc3RyeToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToyOS0zMAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgc2V0X2lkZW50aXR5X3JlZ2lzdHJ5KHNlbGYsIHJlZ2lzdHJ5X2FwcF9pZDogVUludDY0KSAtPiBCb29sOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW4udmFsdWUsICJPbmx5IGFkbWluIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImFkbWluIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluIGV4aXN0cwogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IGFkbWluCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYuaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkLnZhbHVlID0gcmVnaXN0cnlfYXBwX2lkCiAgICBieXRlYyA2IC8vICJpZGVudGl0eV9yZWdpc3RyeV9hcHBfaWQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzQKICAgIC8vIHJldHVybiBCb29sKFRydWUpCiAgICBieXRlY18yIC8vIDB4ODAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wYXltZW50X3Byb2Nlc3Nvci5jb250cmFjdC5QYXltZW50UHJvY2Vzc29yLnByb2Nlc3NfcGF5bWVudChyZWNpcGllbnQ6IGJ5dGVzLCBhbW91bnQ6IHVpbnQ2NCwgcGF5bWVudF90eXBlOiBieXRlcykgLT4gYnl0ZXM6CnByb2Nlc3NfcGF5bWVudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTozNi00MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgcHJvY2Vzc19wYXltZW50KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgcmVjaXBpZW50OiBBZGRyZXNzLAogICAgLy8gICAgIGFtb3VudDogVUludDY0LAogICAgLy8gICAgIHBheW1lbnRfdHlwZTogU3RyaW5nCiAgICAvLyApIC0+IEJvb2w6CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1NC01NQogICAgLy8gIyBDb250cmFjdCBtdXN0IG5vdCBiZSBwYXVzZWQKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUsICJDb250cmFjdCBwYXVzZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiY29udHJhY3RfcGF1c2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbnRyYWN0X3BhdXNlZCBleGlzdHMKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgPT0KICAgIGFzc2VydCAvLyBDb250cmFjdCBwYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1Ny01OAogICAgLy8gIyBCYXNpYyB2YWxpZGF0aW9uCiAgICAvLyBhc3NlcnQgYW1vdW50ID4gMCwgIkFtb3VudCBtdXN0IGJlIHBvc2l0aXZlIgogICAgZnJhbWVfZGlnIC0yCiAgICBhc3NlcnQgLy8gQW1vdW50IG11c3QgYmUgcG9zaXRpdmUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1OQogICAgLy8gYXNzZXJ0IGFtb3VudCA8PSAxMDAwMDAwLCAiQW1vdW50IHRvbyBsYXJnZSAobWF4IDEgQUxHTykiICAjIFNhZmV0eSBsaW1pdAogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoaW50IDEwMDAwMDAgLy8gMTAwMDAwMAogICAgPD0KICAgIGFzc2VydCAvLyBBbW91bnQgdG9vIGxhcmdlIChtYXggMSBBTEdPKQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjY1LTY2CiAgICAvLyAjIEluY3JlbWVudCBwYXltZW50IGNvdW50ZXIKICAgIC8vIGN1cnJlbnRfY291bnQgPSBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZC52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9wYXltZW50c19wcm9jZXNzZWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6NjcKICAgIC8vIHNlbGYudG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkLnZhbHVlID0gY3VycmVudF9jb3VudCArIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18xIC8vICJ0b3RhbF9wYXltZW50c19wcm9jZXNzZWQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjY5CiAgICAvLyByZXR1cm4gQm9vbChUcnVlKQogICAgYnl0ZWNfMiAvLyAweDgwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci5nZXRfdG90YWxfcGF5bWVudHMoKSAtPiB1aW50NjQ6CmdldF90b3RhbF9wYXltZW50czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo3NAogICAgLy8gcmV0dXJuIHNlbGYudG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZCBleGlzdHMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wYXltZW50X3Byb2Nlc3Nvci5jb250cmFjdC5QYXltZW50UHJvY2Vzc29yLmNsYWltX3Jld2FyZChjbGFpbWVyOiBieXRlcywgcmV3YXJkX2Ftb3VudDogdWludDY0KSAtPiBieXRlczoKY2xhaW1fcmV3YXJkOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojc2LTc3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBjbGFpbV9yZXdhcmQoc2VsZiwgY2xhaW1lcjogQWRkcmVzcywgcmV3YXJkX2Ftb3VudDogVUludDY0KSAtPiBCb29sOgogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6ODgKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUsICJDb250cmFjdCBwYXVzZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiY29udHJhY3RfcGF1c2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbnRyYWN0X3BhdXNlZCBleGlzdHMKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgPT0KICAgIGFzc2VydCAvLyBDb250cmFjdCBwYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo4OQogICAgLy8gYXNzZXJ0IHJld2FyZF9hbW91bnQgPiAwLCAiSW52YWxpZCBhbW91bnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBhc3NlcnQgcmV3YXJkX2Ftb3VudCA8PSA1MDAwMDAsICJSZXdhcmQgdG9vIGxhcmdlIChtYXggMC41IEFMR08pIgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDUwMDAwMCAvLyA1MDAwMDAKICAgIDw9CiAgICBhc3NlcnQgLy8gUmV3YXJkIHRvbyBsYXJnZSAobWF4IDAuNSBBTEdPKQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojk1CiAgICAvLyBjdXJyZW50X2NvdW50ID0gc2VsZi50b3RhbF9wYXltZW50c19wcm9jZXNzZWQudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJ0b3RhbF9wYXltZW50c19wcm9jZXNzZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZC52YWx1ZSA9IGN1cnJlbnRfY291bnQgKyAxCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWNfMSAvLyAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo5OAogICAgLy8gcmV0dXJuIEJvb2woVHJ1ZSkKICAgIGJ5dGVjXzIgLy8gMHg4MAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBheW1lbnRfcHJvY2Vzc29yLmNvbnRyYWN0LlBheW1lbnRQcm9jZXNzb3IucGF1c2VfY29udHJhY3QoKSAtPiBieXRlczoKcGF1c2VfY29udHJhY3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTAzCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBhZG1pbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjEwNAogICAgLy8gc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUgPSBCb29sKFRydWUpCiAgICBieXRlYyA0IC8vICJjb250cmFjdF9wYXVzZWQiCiAgICBieXRlY18yIC8vIDB4ODAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTA1CiAgICAvLyByZXR1cm4gQm9vbChUcnVlKQogICAgYnl0ZWNfMiAvLyAweDgwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci51bnBhdXNlX2NvbnRyYWN0KCkgLT4gYnl0ZXM6CnVucGF1c2VfY29udHJhY3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTEwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBhZG1pbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjExMQogICAgLy8gc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUgPSBCb29sKEZhbHNlKQogICAgYnl0ZWMgNCAvLyAiY29udHJhY3RfcGF1c2VkIgogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjExMgogICAgLy8gcmV0dXJuIEJvb2woVHJ1ZSkKICAgIGJ5dGVjXzIgLy8gMHg4MAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBheW1lbnRfcHJvY2Vzc29yLmNvbnRyYWN0LlBheW1lbnRQcm9jZXNzb3IuZ2V0X2FkbWluKCkgLT4gYnl0ZXM6CmdldF9hZG1pbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToxMTcKICAgIC8vIHJldHVybiBzZWxmLmFkbWluLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiYWRtaW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW4gZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci5nZXRfcmVnaXN0cnlfYXBwX2lkKCkgLT4gdWludDY0OgpnZXRfcmVnaXN0cnlfYXBwX2lkOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjEyMgogICAgLy8gcmV0dXJuIHNlbGYuaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlkZW50aXR5X3JlZ2lzdHJ5X2FwcF9pZCBleGlzdHMKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmBwQVH3x1GHRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZAGABWFkbWluD2NvbnRyYWN0X3BhdXNlZAEAGGlkZW50aXR5X3JlZ2lzdHJ5X2FwcF9pZDEYQAAQKzIJZycGImcpImcnBCcFZzEbQQDbgggEmKpUngRNI2HKBJSJ1CoETTu6sASbHcSLBGr3iRYENGs9vATAKHJuNhoAjggAiABrAFoAQwAzACMAEwACIkMxGRREMRhEiAEYFihMULAjQzEZFEQxGESIAQIoTFCwI0MxGRREMRhEiADjKExQsCNDMRkURDEYRIgAxShMULAjQzEZFEQxGEQ2GgE2GgIXiACMKExQsCNDMRkURDEYRIgAdxYoTFCwI0MxGRREMRhENhoBNhoCFzYaA1cCAIgANyhMULAjQzEZFEQxGEQ2GgEXiAARKExQsCNDMRlA/18xGBREI0OKAQEiK2VEMQASRCcGi/9nKomKAwEiJwRlRCcFEkSL/kSL/oHAhD0ORCIpZUQjCClMZyqJIillRImKAgEiJwRlRCcFEkSL/0SL/4Ggwh4ORCIpZUQjCClMZyqJIitlRDEAEkQnBCpnKokiK2VEMQASRCcEJwVnKokiK2VEiSInBmVEiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}