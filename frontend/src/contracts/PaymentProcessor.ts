/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PaymentProcessor","structs":{},"methods":[{"name":"set_identity_registry","args":[{"type":"uint64","name":"registry_app_id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set the Identity Registry app ID (admin only)","events":[],"recommendations":{}},{"name":"process_payment","args":[{"type":"address","name":"recipient","desc":"Address to receive payment"},{"type":"uint64","name":"amount","desc":"Amount in microAlgos"},{"type":"string","name":"payment_type","desc":"\"reward\", \"tip\", \"subscription\", etc."}],"returns":{"type":"bool","desc":"True if payment successful"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Process a micro-payment to verified user","events":[],"recommendations":{}},{"name":"get_total_payments","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total number of payments processed","events":[],"recommendations":{}},{"name":"claim_reward","args":[{"type":"address","name":"claimer","desc":"Address claiming reward"},{"type":"uint64","name":"reward_amount","desc":"Amount to claim"}],"returns":{"type":"bool","desc":"True if claim successful"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim a reward (simplified for MVP)","events":[],"recommendations":{}},{"name":"pause_contract","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause contract (admin only)","events":[],"recommendations":{}},{"name":"unpause_contract","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause contract (admin only)","events":[],"recommendations":{}},{"name":"get_admin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get admin address","events":[],"recommendations":{}},{"name":"get_registry_app_id","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get connected Identity Registry app ID","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    ChainID+Comply Payment Processor Smart Contract\n    \n    Handles atomic micro-payments with compliance verification:\n    - Processes small payments/rewards\n    - Verifies user eligibility via Identity Registry\n    - Prevents double-spending\n    - Maintains payment audit trail\n    ","networks":{},"state":{"schema":{"global":{"ints":2,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"identity_registry_app_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"aWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lk"},"total_payments_processed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcGF5bWVudHNfcHJvY2Vzc2Vk"},"contract_paused":{"keyType":"AVMString","valueType":"bool","key":"Y29udHJhY3RfcGF1c2Vk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[376],"errorMessage":"Amount must be positive"},{"pc":[384],"errorMessage":"Amount too large (max 1 ALGO)"},{"pc":[373,412],"errorMessage":"Contract paused"},{"pc":[415],"errorMessage":"Invalid amount"},{"pc":[182,199,215,231,247,270,287,316],"errorMessage":"OnCompletion is not NoOp"},{"pc":[354,442,456],"errorMessage":"Only admin"},{"pc":[423],"errorMessage":"Reward too large (max 0.5 ALGO)"},{"pc":[341],"errorMessage":"can only call when creating"},{"pc":[185,202,218,234,250,273,290,319],"errorMessage":"can only call when not creating"},{"pc":[350,438,452,467],"errorMessage":"check self.admin exists"},{"pc":[369,408],"errorMessage":"check self.contract_paused exists"},{"pc":[473],"errorMessage":"check self.identity_registry_app_id exists"},{"pc":[388,399,427],"errorMessage":"check self.total_payments_processed exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIiAweDgwICJhZG1pbiIgImNvbnRyYWN0X3BhdXNlZCIgMHgwMCAiaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkIgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjIzLTI0CiAgICAvLyAjIEluaXRpYWxpemUKICAgIC8vIHNlbGYuYWRtaW4udmFsdWUgPSBBZGRyZXNzKEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MpCiAgICBieXRlY18zIC8vICJhZG1pbiIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToyNQogICAgLy8gc2VsZi5pZGVudGl0eV9yZWdpc3RyeV9hcHBfaWQudmFsdWUgPSBVSW50NjQoMCkgICMgV2lsbCBiZSBzZXQgbGF0ZXIKICAgIGJ5dGVjIDYgLy8gImlkZW50aXR5X3JlZ2lzdHJ5X2FwcF9pZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjI2CiAgICAvLyBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZC52YWx1ZSA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMSAvLyAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYuY29udHJhY3RfcGF1c2VkLnZhbHVlID0gQm9vbChGYWxzZSkKICAgIGJ5dGVjIDQgLy8gImNvbnRyYWN0X3BhdXNlZCIKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgYXBwX2dsb2JhbF9wdXQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFBheW1lbnRQcm9jZXNzb3IoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweDk4YWE1NDllIDB4NGQyMzYxY2EgMHg5NDg5ZDQyYSAweDRkM2JiYWIwIDB4OWIxZGM0OGIgMHg2YWY3ODkxNiAweDM0NmIzZGJjIDB4YzAyODcyNmUgLy8gbWV0aG9kICJzZXRfaWRlbnRpdHlfcmVnaXN0cnkodWludDY0KWJvb2wiLCBtZXRob2QgInByb2Nlc3NfcGF5bWVudChhZGRyZXNzLHVpbnQ2NCxzdHJpbmcpYm9vbCIsIG1ldGhvZCAiZ2V0X3RvdGFsX3BheW1lbnRzKCl1aW50NjQiLCBtZXRob2QgImNsYWltX3Jld2FyZChhZGRyZXNzLHVpbnQ2NClib29sIiwgbWV0aG9kICJwYXVzZV9jb250cmFjdCgpYm9vbCIsIG1ldGhvZCAidW5wYXVzZV9jb250cmFjdCgpYm9vbCIsIG1ldGhvZCAiZ2V0X2FkbWluKClhZGRyZXNzIiwgbWV0aG9kICJnZXRfcmVnaXN0cnlfYXBwX2lkKCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3NldF9pZGVudGl0eV9yZWdpc3RyeV9yb3V0ZUA1IG1haW5fcHJvY2Vzc19wYXltZW50X3JvdXRlQDYgbWFpbl9nZXRfdG90YWxfcGF5bWVudHNfcm91dGVANyBtYWluX2NsYWltX3Jld2FyZF9yb3V0ZUA4IG1haW5fcGF1c2VfY29udHJhY3Rfcm91dGVAOSBtYWluX3VucGF1c2VfY29udHJhY3Rfcm91dGVAMTAgbWFpbl9nZXRfYWRtaW5fcm91dGVAMTEgbWFpbl9nZXRfcmVnaXN0cnlfYXBwX2lkX3JvdXRlQDEyCgptYWluX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgUGF5bWVudFByb2Nlc3NvcihBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRfcmVnaXN0cnlfYXBwX2lkX3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjExOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3JlZ2lzdHJ5X2FwcF9pZAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfYWRtaW5fcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTE0CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfYWRtaW4KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdW5wYXVzZV9jb250cmFjdF9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToxMDcKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVucGF1c2VfY29udHJhY3QKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcGF1c2VfY29udHJhY3Rfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToxMDAKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHBhdXNlX2NvbnRyYWN0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NsYWltX3Jld2FyZF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojc2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFBheW1lbnRQcm9jZXNzb3IoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo3NgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGNsYWltX3Jld2FyZAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfdG90YWxfcGF5bWVudHNfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo3MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3RvdGFsX3BheW1lbnRzCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Byb2Nlc3NfcGF5bWVudF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjM2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIFBheW1lbnRQcm9jZXNzb3IoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzYKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBwcm9jZXNzX3BheW1lbnQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0X2lkZW50aXR5X3JlZ2lzdHJ5X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MjkKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgUGF5bWVudFByb2Nlc3NvcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjI5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgc2V0X2lkZW50aXR5X3JlZ2lzdHJ5CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBQYXltZW50UHJvY2Vzc29yKEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE1CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wYXltZW50X3Byb2Nlc3Nvci5jb250cmFjdC5QYXltZW50UHJvY2Vzc29yLnNldF9pZGVudGl0eV9yZWdpc3RyeShyZWdpc3RyeV9hcHBfaWQ6IHVpbnQ2NCkgLT4gYnl0ZXM6CnNldF9pZGVudGl0eV9yZWdpc3RyeToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToyOS0zMAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgc2V0X2lkZW50aXR5X3JlZ2lzdHJ5KHNlbGYsIHJlZ2lzdHJ5X2FwcF9pZDogVUludDY0KSAtPiBCb29sOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW4udmFsdWUsICJPbmx5IGFkbWluIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImFkbWluIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluIGV4aXN0cwogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IGFkbWluCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYuaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkLnZhbHVlID0gcmVnaXN0cnlfYXBwX2lkCiAgICBieXRlYyA2IC8vICJpZGVudGl0eV9yZWdpc3RyeV9hcHBfaWQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MzQKICAgIC8vIHJldHVybiBCb29sKFRydWUpCiAgICBieXRlY18yIC8vIDB4ODAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wYXltZW50X3Byb2Nlc3Nvci5jb250cmFjdC5QYXltZW50UHJvY2Vzc29yLnByb2Nlc3NfcGF5bWVudChyZWNpcGllbnQ6IGJ5dGVzLCBhbW91bnQ6IHVpbnQ2NCwgcGF5bWVudF90eXBlOiBieXRlcykgLT4gYnl0ZXM6CnByb2Nlc3NfcGF5bWVudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTozNi00MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgcHJvY2Vzc19wYXltZW50KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgcmVjaXBpZW50OiBBZGRyZXNzLAogICAgLy8gICAgIGFtb3VudDogVUludDY0LAogICAgLy8gICAgIHBheW1lbnRfdHlwZTogU3RyaW5nCiAgICAvLyApIC0+IEJvb2w6CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1NC01NQogICAgLy8gIyBDb250cmFjdCBtdXN0IG5vdCBiZSBwYXVzZWQKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUsICJDb250cmFjdCBwYXVzZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiY29udHJhY3RfcGF1c2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbnRyYWN0X3BhdXNlZCBleGlzdHMKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgPT0KICAgIGFzc2VydCAvLyBDb250cmFjdCBwYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1Ny01OAogICAgLy8gIyBCYXNpYyB2YWxpZGF0aW9uCiAgICAvLyBhc3NlcnQgYW1vdW50ID4gMCwgIkFtb3VudCBtdXN0IGJlIHBvc2l0aXZlIgogICAgZnJhbWVfZGlnIC0yCiAgICBhc3NlcnQgLy8gQW1vdW50IG11c3QgYmUgcG9zaXRpdmUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo1OQogICAgLy8gYXNzZXJ0IGFtb3VudCA8PSAxMDAwMDAwLCAiQW1vdW50IHRvbyBsYXJnZSAobWF4IDEgQUxHTykiICAjIFNhZmV0eSBsaW1pdAogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoaW50IDEwMDAwMDAgLy8gMTAwMDAwMAogICAgPD0KICAgIGFzc2VydCAvLyBBbW91bnQgdG9vIGxhcmdlIChtYXggMSBBTEdPKQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjY1LTY2CiAgICAvLyAjIEluY3JlbWVudCBwYXltZW50IGNvdW50ZXIKICAgIC8vIGN1cnJlbnRfY291bnQgPSBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZC52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9wYXltZW50c19wcm9jZXNzZWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6NjcKICAgIC8vIHNlbGYudG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkLnZhbHVlID0gY3VycmVudF9jb3VudCArIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18xIC8vICJ0b3RhbF9wYXltZW50c19wcm9jZXNzZWQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjY5CiAgICAvLyByZXR1cm4gQm9vbChUcnVlKQogICAgYnl0ZWNfMiAvLyAweDgwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci5nZXRfdG90YWxfcGF5bWVudHMoKSAtPiB1aW50NjQ6CmdldF90b3RhbF9wYXltZW50czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo3NAogICAgLy8gcmV0dXJuIHNlbGYudG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZCBleGlzdHMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wYXltZW50X3Byb2Nlc3Nvci5jb250cmFjdC5QYXltZW50UHJvY2Vzc29yLmNsYWltX3Jld2FyZChjbGFpbWVyOiBieXRlcywgcmV3YXJkX2Ftb3VudDogdWludDY0KSAtPiBieXRlczoKY2xhaW1fcmV3YXJkOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojc2LTc3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBjbGFpbV9yZXdhcmQoc2VsZiwgY2xhaW1lcjogQWRkcmVzcywgcmV3YXJkX2Ftb3VudDogVUludDY0KSAtPiBCb29sOgogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6ODgKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUsICJDb250cmFjdCBwYXVzZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiY29udHJhY3RfcGF1c2VkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbnRyYWN0X3BhdXNlZCBleGlzdHMKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgPT0KICAgIGFzc2VydCAvLyBDb250cmFjdCBwYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo4OQogICAgLy8gYXNzZXJ0IHJld2FyZF9hbW91bnQgPiAwLCAiSW52YWxpZCBhbW91bnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBhc3NlcnQgcmV3YXJkX2Ftb3VudCA8PSA1MDAwMDAsICJSZXdhcmQgdG9vIGxhcmdlIChtYXggMC41IEFMR08pIgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDUwMDAwMCAvLyA1MDAwMDAKICAgIDw9CiAgICBhc3NlcnQgLy8gUmV3YXJkIHRvbyBsYXJnZSAobWF4IDAuNSBBTEdPKQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojk1CiAgICAvLyBjdXJyZW50X2NvdW50ID0gc2VsZi50b3RhbF9wYXltZW50c19wcm9jZXNzZWQudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJ0b3RhbF9wYXltZW50c19wcm9jZXNzZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBzZWxmLnRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZC52YWx1ZSA9IGN1cnJlbnRfY291bnQgKyAxCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWNfMSAvLyAidG90YWxfcGF5bWVudHNfcHJvY2Vzc2VkIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weTo5OAogICAgLy8gcmV0dXJuIEJvb2woVHJ1ZSkKICAgIGJ5dGVjXzIgLy8gMHg4MAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBheW1lbnRfcHJvY2Vzc29yLmNvbnRyYWN0LlBheW1lbnRQcm9jZXNzb3IucGF1c2VfY29udHJhY3QoKSAtPiBieXRlczoKcGF1c2VfY29udHJhY3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTAzCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBhZG1pbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjEwNAogICAgLy8gc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUgPSBCb29sKFRydWUpCiAgICBieXRlYyA0IC8vICJjb250cmFjdF9wYXVzZWQiCiAgICBieXRlY18yIC8vIDB4ODAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTA1CiAgICAvLyByZXR1cm4gQm9vbChUcnVlKQogICAgYnl0ZWNfMiAvLyAweDgwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci51bnBhdXNlX2NvbnRyYWN0KCkgLT4gYnl0ZXM6CnVucGF1c2VfY29udHJhY3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5bWVudF9wcm9jZXNzb3IvY29udHJhY3QucHk6MTEwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluLnZhbHVlLCAiT25seSBhZG1pbiIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJhZG1pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbiBleGlzdHMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBhZG1pbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjExMQogICAgLy8gc2VsZi5jb250cmFjdF9wYXVzZWQudmFsdWUgPSBCb29sKEZhbHNlKQogICAgYnl0ZWMgNCAvLyAiY29udHJhY3RfcGF1c2VkIgogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjExMgogICAgLy8gcmV0dXJuIEJvb2woVHJ1ZSkKICAgIGJ5dGVjXzIgLy8gMHg4MAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBheW1lbnRfcHJvY2Vzc29yLmNvbnRyYWN0LlBheW1lbnRQcm9jZXNzb3IuZ2V0X2FkbWluKCkgLT4gYnl0ZXM6CmdldF9hZG1pbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXltZW50X3Byb2Nlc3Nvci9jb250cmFjdC5weToxMTcKICAgIC8vIHJldHVybiBzZWxmLmFkbWluLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiYWRtaW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW4gZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGF5bWVudF9wcm9jZXNzb3IuY29udHJhY3QuUGF5bWVudFByb2Nlc3Nvci5nZXRfcmVnaXN0cnlfYXBwX2lkKCkgLT4gdWludDY0OgpnZXRfcmVnaXN0cnlfYXBwX2lkOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheW1lbnRfcHJvY2Vzc29yL2NvbnRyYWN0LnB5OjEyMgogICAgLy8gcmV0dXJuIHNlbGYuaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaWRlbnRpdHlfcmVnaXN0cnlfYXBwX2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlkZW50aXR5X3JlZ2lzdHJ5X2FwcF9pZCBleGlzdHMKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmBwQVH3x1GHRvdGFsX3BheW1lbnRzX3Byb2Nlc3NlZAGABWFkbWluD2NvbnRyYWN0X3BhdXNlZAEAGGlkZW50aXR5X3JlZ2lzdHJ5X2FwcF9pZDEYQAAQKzIJZycGImcpImcnBCcFZzEbQQDbgggEmKpUngRNI2HKBJSJ1CoETTu6sASbHcSLBGr3iRYENGs9vATAKHJuNhoAjggAiABrAFoAQwAzACMAEwACIkMxGRREMRhEiAEYFihMULAjQzEZFEQxGESIAQIoTFCwI0MxGRREMRhEiADjKExQsCNDMRkURDEYRIgAxShMULAjQzEZFEQxGEQ2GgE2GgIXiACMKExQsCNDMRkURDEYRIgAdxYoTFCwI0MxGRREMRhENhoBNhoCFzYaA1cCAIgANyhMULAjQzEZFEQxGEQ2GgEXiAARKExQsCNDMRlA/18xGBREI0OKAQEiK2VEMQASRCcGi/9nKomKAwEiJwRlRCcFEkSL/kSL/oHAhD0ORCIpZUQjCClMZyqJIillRImKAgEiJwRlRCcFEkSL/0SL/4Ggwh4ORCIpZUQjCClMZyqJIitlRDEAEkQnBCpnKokiK2VEMQASRCcEJwVnKokiK2VEiSInBmVEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PaymentProcessor contract
 */
export type PaymentProcessorArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'set_identity_registry(uint64)bool': {
      registryAppId: bigint | number
    }
    'process_payment(address,uint64,string)bool': {
      /**
       * Address to receive payment
       */
      recipient: string
      /**
       * Amount in microAlgos
       */
      amount: bigint | number
      /**
       * "reward", "tip", "subscription", etc.
       */
      paymentType: string
    }
    'get_total_payments()uint64': Record<string, never>
    'claim_reward(address,uint64)bool': {
      /**
       * Address claiming reward
       */
      claimer: string
      /**
       * Amount to claim
       */
      rewardAmount: bigint | number
    }
    'pause_contract()bool': Record<string, never>
    'unpause_contract()bool': Record<string, never>
    'get_admin()address': Record<string, never>
    'get_registry_app_id()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'set_identity_registry(uint64)bool': [registryAppId: bigint | number]
    'process_payment(address,uint64,string)bool': [recipient: string, amount: bigint | number, paymentType: string]
    'get_total_payments()uint64': []
    'claim_reward(address,uint64)bool': [claimer: string, rewardAmount: bigint | number]
    'pause_contract()bool': []
    'unpause_contract()bool': []
    'get_admin()address': []
    'get_registry_app_id()uint64': []
  }
}

/**
 * The return type for each method
 */
export type PaymentProcessorReturns = {
  'set_identity_registry(uint64)bool': boolean
  'process_payment(address,uint64,string)bool': boolean
  'get_total_payments()uint64': bigint
  'claim_reward(address,uint64)bool': boolean
  'pause_contract()bool': boolean
  'unpause_contract()bool': boolean
  'get_admin()address': string
  'get_registry_app_id()uint64': bigint
}

/**
 * Defines the types of available calls and state of the PaymentProcessor smart contract.
 */
export type PaymentProcessorTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_identity_registry(uint64)bool' | 'set_identity_registry', {
      argsObj: PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool']
      argsTuple: PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']
      returns: PaymentProcessorReturns['set_identity_registry(uint64)bool']
    }>
    & Record<'process_payment(address,uint64,string)bool' | 'process_payment', {
      argsObj: PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool']
      argsTuple: PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']
      /**
       * True if payment successful
       */
      returns: PaymentProcessorReturns['process_payment(address,uint64,string)bool']
    }>
    & Record<'get_total_payments()uint64' | 'get_total_payments', {
      argsObj: PaymentProcessorArgs['obj']['get_total_payments()uint64']
      argsTuple: PaymentProcessorArgs['tuple']['get_total_payments()uint64']
      returns: PaymentProcessorReturns['get_total_payments()uint64']
    }>
    & Record<'claim_reward(address,uint64)bool' | 'claim_reward', {
      argsObj: PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool']
      argsTuple: PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']
      /**
       * True if claim successful
       */
      returns: PaymentProcessorReturns['claim_reward(address,uint64)bool']
    }>
    & Record<'pause_contract()bool' | 'pause_contract', {
      argsObj: PaymentProcessorArgs['obj']['pause_contract()bool']
      argsTuple: PaymentProcessorArgs['tuple']['pause_contract()bool']
      returns: PaymentProcessorReturns['pause_contract()bool']
    }>
    & Record<'unpause_contract()bool' | 'unpause_contract', {
      argsObj: PaymentProcessorArgs['obj']['unpause_contract()bool']
      argsTuple: PaymentProcessorArgs['tuple']['unpause_contract()bool']
      returns: PaymentProcessorReturns['unpause_contract()bool']
    }>
    & Record<'get_admin()address' | 'get_admin', {
      argsObj: PaymentProcessorArgs['obj']['get_admin()address']
      argsTuple: PaymentProcessorArgs['tuple']['get_admin()address']
      returns: PaymentProcessorReturns['get_admin()address']
    }>
    & Record<'get_registry_app_id()uint64' | 'get_registry_app_id', {
      argsObj: PaymentProcessorArgs['obj']['get_registry_app_id()uint64']
      argsTuple: PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']
      returns: PaymentProcessorReturns['get_registry_app_id()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        identityRegistryAppId: bigint
        totalPaymentsProcessed: bigint
        contractPaused: boolean
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PaymentProcessorSignatures = keyof PaymentProcessorTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PaymentProcessorNonVoidMethodSignatures = keyof PaymentProcessorTypes['methods'] extends infer T ? T extends keyof PaymentProcessorTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PaymentProcessor smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PaymentProcessorSignatures> = PaymentProcessorTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PaymentProcessor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PaymentProcessorSignatures> = PaymentProcessorTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PaymentProcessorTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PaymentProcessorCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PaymentProcessorDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PaymentProcessorCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PaymentProcessor smart contract
 */
export abstract class PaymentProcessorParamsFactory {
  /**
   * Constructs a no op call for the set_identity_registry(uint64)bool ABI method
   *
   * Set the Identity Registry app ID (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setIdentityRegistry(params: CallParams<PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool'] | PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_identity_registry(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.registryAppId],
    }
  }
  /**
   * Constructs a no op call for the process_payment(address,uint64,string)bool ABI method
   *
   * Process a micro-payment to verified user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static processPayment(params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'process_payment(address,uint64,string)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient, params.args.amount, params.args.paymentType],
    }
  }
  /**
   * Constructs a no op call for the get_total_payments()uint64 ABI method
   *
   * Get total number of payments processed
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalPayments(params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_payments()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claim_reward(address,uint64)bool ABI method
   *
   * Claim a reward (simplified for MVP)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimReward(params: CallParams<PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool'] | PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_reward(address,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.claimer, params.args.rewardAmount],
    }
  }
  /**
   * Constructs a no op call for the pause_contract()bool ABI method
   *
   * Pause contract (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseContract(params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_contract()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_contract()bool ABI method
   *
   * Unpause contract (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseContract(params: CallParams<PaymentProcessorArgs['obj']['unpause_contract()bool'] | PaymentProcessorArgs['tuple']['unpause_contract()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_contract()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_admin()address ABI method
   *
   * Get admin address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAdmin(params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_admin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_registry_app_id()uint64 ABI method
   *
   * Get connected Identity Registry app ID
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getRegistryAppId(params: CallParams<PaymentProcessorArgs['obj']['get_registry_app_id()uint64'] | PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_registry_app_id()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PaymentProcessor smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PaymentProcessorFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PaymentProcessorFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PaymentProcessorClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PaymentProcessorClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PaymentProcessor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PaymentProcessorDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PaymentProcessorClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PaymentProcessor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PaymentProcessor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PaymentProcessor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PaymentProcessorClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PaymentProcessor smart contract
 */
export class PaymentProcessorClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PaymentProcessorClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PaymentProcessor app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PaymentProcessorClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PaymentProcessorNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PaymentProcessorClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PaymentProcessorClient> {
    return new PaymentProcessorClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PaymentProcessorClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PaymentProcessorClient> {
    return new PaymentProcessorClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `set_identity_registry(uint64)bool` ABI method.
     *
     * Set the Identity Registry app ID (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setIdentityRegistry: (params: CallParams<PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool'] | PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.setIdentityRegistry(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `process_payment(address,uint64,string)bool` ABI method.
     *
     * Process a micro-payment to verified user
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if payment successful
     */
    processPayment: (params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.processPayment(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_total_payments()uint64` ABI method.
     *
     * Get total number of payments processed
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalPayments: (params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.getTotalPayments(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `claim_reward(address,uint64)bool` ABI method.
     *
     * Claim a reward (simplified for MVP)
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if claim successful
     */
    claimReward: (params: CallParams<PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool'] | PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.claimReward(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseContract: (params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.pauseContract(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `unpause_contract()bool` ABI method.
     *
     * Unpause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseContract: (params: CallParams<PaymentProcessorArgs['obj']['unpause_contract()bool'] | PaymentProcessorArgs['tuple']['unpause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.unpauseContract(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_admin()address` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAdmin: (params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.getAdmin(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_registry_app_id()uint64` ABI method.
     *
     * Get connected Identity Registry app ID
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getRegistryAppId: (params: CallParams<PaymentProcessorArgs['obj']['get_registry_app_id()uint64'] | PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.getRegistryAppId(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `set_identity_registry(uint64)bool` ABI method.
     *
     * Set the Identity Registry app ID (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setIdentityRegistry: (params: CallParams<PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool'] | PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.setIdentityRegistry(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `process_payment(address,uint64,string)bool` ABI method.
     *
     * Process a micro-payment to verified user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if payment successful
     */
    processPayment: (params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.processPayment(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_total_payments()uint64` ABI method.
     *
     * Get total number of payments processed
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalPayments: (params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.getTotalPayments(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `claim_reward(address,uint64)bool` ABI method.
     *
     * Claim a reward (simplified for MVP)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if claim successful
     */
    claimReward: (params: CallParams<PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool'] | PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.claimReward(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseContract: (params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.pauseContract(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `unpause_contract()bool` ABI method.
     *
     * Unpause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseContract: (params: CallParams<PaymentProcessorArgs['obj']['unpause_contract()bool'] | PaymentProcessorArgs['tuple']['unpause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.unpauseContract(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_admin()address` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAdmin: (params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.getAdmin(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_registry_app_id()uint64` ABI method.
     *
     * Get connected Identity Registry app ID
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getRegistryAppId: (params: CallParams<PaymentProcessorArgs['obj']['get_registry_app_id()uint64'] | PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.getRegistryAppId(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `set_identity_registry(uint64)bool` ABI method.
     *
     * Set the Identity Registry app ID (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setIdentityRegistry: async (params: CallParams<PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool'] | PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.setIdentityRegistry(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['set_identity_registry(uint64)bool'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `process_payment(address,uint64,string)bool` ABI method.
     *
     * Process a micro-payment to verified user
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if payment successful
     */
    processPayment: async (params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.processPayment(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['process_payment(address,uint64,string)bool'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_total_payments()uint64` ABI method.
     *
     * Get total number of payments processed
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalPayments: async (params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.getTotalPayments(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['get_total_payments()uint64'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `claim_reward(address,uint64)bool` ABI method.
     *
     * Claim a reward (simplified for MVP)
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if claim successful
     */
    claimReward: async (params: CallParams<PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool'] | PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.claimReward(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['claim_reward(address,uint64)bool'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseContract: async (params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.pauseContract(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['pause_contract()bool'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `unpause_contract()bool` ABI method.
     *
     * Unpause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseContract: async (params: CallParams<PaymentProcessorArgs['obj']['unpause_contract()bool'] | PaymentProcessorArgs['tuple']['unpause_contract()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.unpauseContract(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['unpause_contract()bool'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_admin()address` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAdmin: async (params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.getAdmin(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['get_admin()address'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_registry_app_id()uint64` ABI method.
     *
     * Get connected Identity Registry app ID
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getRegistryAppId: async (params: CallParams<PaymentProcessorArgs['obj']['get_registry_app_id()uint64'] | PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.getRegistryAppId(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['get_registry_app_id()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PaymentProcessorClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PaymentProcessor app
   */
  state = {
    /**
     * Methods to access global state for the current PaymentProcessor app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          identityRegistryAppId: result.identity_registry_app_id,
          totalPaymentsProcessed: result.total_payments_processed,
          contractPaused: result.contract_paused,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the identity_registry_app_id key in global state
       */
      identityRegistryAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("identity_registry_app_id")) as bigint | undefined },
      /**
       * Get the current value of the total_payments_processed key in global state
       */
      totalPaymentsProcessed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_payments_processed")) as bigint | undefined },
      /**
       * Get the current value of the contract_paused key in global state
       */
      contractPaused: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("contract_paused")) as boolean | undefined },
    },
  }

  public newGroup(): PaymentProcessorComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_identity_registry(uint64)bool method call against the PaymentProcessor contract
       */
      setIdentityRegistry(params: CallParams<PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool'] | PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setIdentityRegistry(params)))
        resultMappers.push((v) => client.decodeReturnValue('set_identity_registry(uint64)bool', v))
        return this
      },
      /**
       * Add a process_payment(address,uint64,string)bool method call against the PaymentProcessor contract
       */
      processPayment(params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.processPayment(params)))
        resultMappers.push((v) => client.decodeReturnValue('process_payment(address,uint64,string)bool', v))
        return this
      },
      /**
       * Add a get_total_payments()uint64 method call against the PaymentProcessor contract
       */
      getTotalPayments(params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalPayments(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_payments()uint64', v))
        return this
      },
      /**
       * Add a claim_reward(address,uint64)bool method call against the PaymentProcessor contract
       */
      claimReward(params: CallParams<PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool'] | PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimReward(params)))
        resultMappers.push((v) => client.decodeReturnValue('claim_reward(address,uint64)bool', v))
        return this
      },
      /**
       * Add a pause_contract()bool method call against the PaymentProcessor contract
       */
      pauseContract(params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_contract()bool', v))
        return this
      },
      /**
       * Add a unpause_contract()bool method call against the PaymentProcessor contract
       */
      unpauseContract(params: CallParams<PaymentProcessorArgs['obj']['unpause_contract()bool'] | PaymentProcessorArgs['tuple']['unpause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_contract()bool', v))
        return this
      },
      /**
       * Add a get_admin()address method call against the PaymentProcessor contract
       */
      getAdmin(params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_admin()address', v))
        return this
      },
      /**
       * Add a get_registry_app_id()uint64 method call against the PaymentProcessor contract
       */
      getRegistryAppId(params: CallParams<PaymentProcessorArgs['obj']['get_registry_app_id()uint64'] | PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getRegistryAppId(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_registry_app_id()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the PaymentProcessor contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PaymentProcessorComposer
  }
}
export type PaymentProcessorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_identity_registry(uint64)bool ABI method.
   *
   * Set the Identity Registry app ID (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setIdentityRegistry(params?: CallParams<PaymentProcessorArgs['obj']['set_identity_registry(uint64)bool'] | PaymentProcessorArgs['tuple']['set_identity_registry(uint64)bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['set_identity_registry(uint64)bool'] | undefined]>

  /**
   * Calls the process_payment(address,uint64,string)bool ABI method.
   *
   * Process a micro-payment to verified user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  processPayment(params?: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64,string)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64,string)bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['process_payment(address,uint64,string)bool'] | undefined]>

  /**
   * Calls the get_total_payments()uint64 ABI method.
   *
   * Get total number of payments processed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalPayments(params?: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['get_total_payments()uint64'] | undefined]>

  /**
   * Calls the claim_reward(address,uint64)bool ABI method.
   *
   * Claim a reward (simplified for MVP)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimReward(params?: CallParams<PaymentProcessorArgs['obj']['claim_reward(address,uint64)bool'] | PaymentProcessorArgs['tuple']['claim_reward(address,uint64)bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['claim_reward(address,uint64)bool'] | undefined]>

  /**
   * Calls the pause_contract()bool ABI method.
   *
   * Pause contract (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseContract(params?: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['pause_contract()bool'] | undefined]>

  /**
   * Calls the unpause_contract()bool ABI method.
   *
   * Unpause contract (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseContract(params?: CallParams<PaymentProcessorArgs['obj']['unpause_contract()bool'] | PaymentProcessorArgs['tuple']['unpause_contract()bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['unpause_contract()bool'] | undefined]>

  /**
   * Calls the get_admin()address ABI method.
   *
   * Get admin address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAdmin(params?: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['get_admin()address'] | undefined]>

  /**
   * Calls the get_registry_app_id()uint64 ABI method.
   *
   * Get connected Identity Registry app ID
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRegistryAppId(params?: CallParams<PaymentProcessorArgs['obj']['get_registry_app_id()uint64'] | PaymentProcessorArgs['tuple']['get_registry_app_id()uint64']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['get_registry_app_id()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PaymentProcessorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PaymentProcessorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PaymentProcessorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PaymentProcessorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PaymentProcessorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PaymentProcessorComposerResults<TReturns>>
}
export type PaymentProcessorComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

