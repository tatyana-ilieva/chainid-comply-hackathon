/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"IdentityRegistry","structs":{},"methods":[{"name":"register_identity","args":[{"type":"address","name":"user_address","desc":"User's Algorand address"},{"type":"uint64","name":"verification_level","desc":"1=Basic, 2=Enhanced, 3=Premium KYC"}],"returns":{"type":"bool","desc":"True if registration successful"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Register a user's identity with verification level","events":[],"recommendations":{}},{"name":"verify_identity","args":[{"type":"address","name":"user_address","desc":"Address to check"}],"returns":{"type":"bool","desc":"True if verified"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check if a user is verified (simplified for MVP)","events":[],"recommendations":{}},{"name":"get_total_verified_users","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total number of verified users","events":[],"recommendations":{}},{"name":"set_admin","args":[{"type":"address","name":"new_admin","desc":"New admin address"}],"returns":{"type":"bool","desc":"True if successful"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer admin rights (current admin only)","events":[],"recommendations":{}},{"name":"pause_contract","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause contract (admin only)","events":[],"recommendations":{}},{"name":"unpause_contract","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unpause contract (admin only)","events":[],"recommendations":{}},{"name":"get_admin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get current admin address","events":[],"recommendations":{}},{"name":"is_paused","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check if contract is paused","events":[],"recommendations":{}},{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simple test method","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    ChainID+Comply Identity Registry Smart Contract\n    \n    Simple version for hackathon MVP:\n    - Stores identity verification status\n    - Tracks KYC verification levels\n    - Admin management\n    ","networks":{},"state":{"schema":{"global":{"ints":1,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"total_verified_users":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfdmVyaWZpZWRfdXNlcnM="},"contract_paused":{"keyType":"AVMString","valueType":"bool","key":"Y29udHJhY3RfcGF1c2Vk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[344],"errorMessage":"Contract paused"},{"pc":[359],"errorMessage":"Invalid level"},{"pc":[156,186,202,218,234,250,269,286,303],"errorMessage":"OnCompletion is not NoOp"},{"pc":[393,407,420],"errorMessage":"Only admin"},{"pc":[331],"errorMessage":"can only call when creating"},{"pc":[159,189,205,221,237,253,272,289,306],"errorMessage":"can only call when not creating"},{"pc":[389,403,416,430],"errorMessage":"check self.admin exists"},{"pc":[340,435],"errorMessage":"check self.contract_paused exists"},{"pc":[364,381],"errorMessage":"check self.total_verified_users exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAQAmBgQVH3x1BWFkbWluD2NvbnRyYWN0X3BhdXNlZAGAFHRvdGFsX3ZlcmlmaWVkX3VzZXJzAQAxGEAADCkyCWcnBCNnKicFZzEbQQDyggkEXUepbATgwnsKBM/ROSoE1/QmdASbHcSLBGr3iRYENGs9vAQBsZpcBAK+zhE2GgCOCQCVAIQAcwBgAFAAQAAwACAAAiNDMRkURDEYRDYaAVcCAIgBDEkVFlcGAkxQKExQsCJDMRkURDEYRIgA7yhMULAiQzEZFEQxGESIANooTFCwIkMxGRREMRhEiAC8KExQsCJDMRkURDEYRIgAnyhMULAiQzEZFEQxGEQ2GgGIAHsoTFCwIkMxGRREMRhEiABlFihMULAiQzEZFEQxGESABRUffHWAsCJDMRkURDEYRDYaATYaAheIABEoTFCwIkMxGUD/TzEYFEQiQ4oCASMqZUQnBRJEi/9BABeL/4EDDkEADyJEIycEZUQiCCcETGcriSNC/+4jJwRlRImKAQEjKWVEMQASRCmL/2criSMpZUQxABJEKitnK4kjKWVEMQASRConBWcriSMpZUSJIyplRImKAQGAB0hlbGxvLCCL/1CJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the IdentityRegistry contract
 */
export type IdentityRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'register_identity(address,uint64)bool': {
      /**
       * User's Algorand address
       */
      userAddress: string
      /**
       * 1=Basic, 2=Enhanced, 3=Premium KYC
       */
      verificationLevel: bigint | number
    }
    'verify_identity(address)bool': {
      /**
       * Address to check
       */
      userAddress: string
    }
    'get_total_verified_users()uint64': Record<string, never>
    'set_admin(address)bool': {
      /**
       * New admin address
       */
      newAdmin: string
    }
    'pause_contract()bool': Record<string, never>
    'unpause_contract()bool': Record<string, never>
    'get_admin()address': Record<string, never>
    'is_paused()bool': Record<string, never>
    'hello(string)string': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'register_identity(address,uint64)bool': [userAddress: string, verificationLevel: bigint | number]
    'verify_identity(address)bool': [userAddress: string]
    'get_total_verified_users()uint64': []
    'set_admin(address)bool': [newAdmin: string]
    'pause_contract()bool': []
    'unpause_contract()bool': []
    'get_admin()address': []
    'is_paused()bool': []
    'hello(string)string': [name: string]
  }
}

/**
 * The return type for each method
 */
export type IdentityRegistryReturns = {
  'register_identity(address,uint64)bool': boolean
  'verify_identity(address)bool': boolean
  'get_total_verified_users()uint64': bigint
  'set_admin(address)bool': boolean
  'pause_contract()bool': boolean
  'unpause_contract()bool': boolean
  'get_admin()address': string
  'is_paused()bool': boolean
  'hello(string)string': string
}

/**
 * Defines the types of available calls and state of the IdentityRegistry smart contract.
 */
export type IdentityRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register_identity(address,uint64)bool' | 'register_identity', {
      argsObj: IdentityRegistryArgs['obj']['register_identity(address,uint64)bool']
      argsTuple: IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']
      /**
       * True if registration successful
       */
      returns: IdentityRegistryReturns['register_identity(address,uint64)bool']
    }>
    & Record<'verify_identity(address)bool' | 'verify_identity', {
      argsObj: IdentityRegistryArgs['obj']['verify_identity(address)bool']
      argsTuple: IdentityRegistryArgs['tuple']['verify_identity(address)bool']
      /**
       * True if verified
       */
      returns: IdentityRegistryReturns['verify_identity(address)bool']
    }>
    & Record<'get_total_verified_users()uint64' | 'get_total_verified_users', {
      argsObj: IdentityRegistryArgs['obj']['get_total_verified_users()uint64']
      argsTuple: IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']
      returns: IdentityRegistryReturns['get_total_verified_users()uint64']
    }>
    & Record<'set_admin(address)bool' | 'set_admin', {
      argsObj: IdentityRegistryArgs['obj']['set_admin(address)bool']
      argsTuple: IdentityRegistryArgs['tuple']['set_admin(address)bool']
      /**
       * True if successful
       */
      returns: IdentityRegistryReturns['set_admin(address)bool']
    }>
    & Record<'pause_contract()bool' | 'pause_contract', {
      argsObj: IdentityRegistryArgs['obj']['pause_contract()bool']
      argsTuple: IdentityRegistryArgs['tuple']['pause_contract()bool']
      returns: IdentityRegistryReturns['pause_contract()bool']
    }>
    & Record<'unpause_contract()bool' | 'unpause_contract', {
      argsObj: IdentityRegistryArgs['obj']['unpause_contract()bool']
      argsTuple: IdentityRegistryArgs['tuple']['unpause_contract()bool']
      returns: IdentityRegistryReturns['unpause_contract()bool']
    }>
    & Record<'get_admin()address' | 'get_admin', {
      argsObj: IdentityRegistryArgs['obj']['get_admin()address']
      argsTuple: IdentityRegistryArgs['tuple']['get_admin()address']
      returns: IdentityRegistryReturns['get_admin()address']
    }>
    & Record<'is_paused()bool' | 'is_paused', {
      argsObj: IdentityRegistryArgs['obj']['is_paused()bool']
      argsTuple: IdentityRegistryArgs['tuple']['is_paused()bool']
      returns: IdentityRegistryReturns['is_paused()bool']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: IdentityRegistryArgs['obj']['hello(string)string']
      argsTuple: IdentityRegistryArgs['tuple']['hello(string)string']
      returns: IdentityRegistryReturns['hello(string)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        totalVerifiedUsers: bigint
        contractPaused: boolean
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type IdentityRegistrySignatures = keyof IdentityRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type IdentityRegistryNonVoidMethodSignatures = keyof IdentityRegistryTypes['methods'] extends infer T ? T extends keyof IdentityRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the IdentityRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends IdentityRegistrySignatures> = IdentityRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the IdentityRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends IdentityRegistrySignatures> = IdentityRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = IdentityRegistryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type IdentityRegistryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type IdentityRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: IdentityRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the IdentityRegistry smart contract
 */
export abstract class IdentityRegistryParamsFactory {
  /**
   * Constructs a no op call for the register_identity(address,uint64)bool ABI method
   *
   * Register a user's identity with verification level
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerIdentity(params: CallParams<IdentityRegistryArgs['obj']['register_identity(address,uint64)bool'] | IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register_identity(address,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.verificationLevel],
    }
  }
  /**
   * Constructs a no op call for the verify_identity(address)bool ABI method
   *
   * Check if a user is verified (simplified for MVP)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyIdentity(params: CallParams<IdentityRegistryArgs['obj']['verify_identity(address)bool'] | IdentityRegistryArgs['tuple']['verify_identity(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify_identity(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the get_total_verified_users()uint64 ABI method
   *
   * Get total number of verified users
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalVerifiedUsers(params: CallParams<IdentityRegistryArgs['obj']['get_total_verified_users()uint64'] | IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_verified_users()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the set_admin(address)bool ABI method
   *
   * Transfer admin rights (current admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAdmin(params: CallParams<IdentityRegistryArgs['obj']['set_admin(address)bool'] | IdentityRegistryArgs['tuple']['set_admin(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_admin(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the pause_contract()bool ABI method
   *
   * Pause contract (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseContract(params: CallParams<IdentityRegistryArgs['obj']['pause_contract()bool'] | IdentityRegistryArgs['tuple']['pause_contract()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_contract()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause_contract()bool ABI method
   *
   * Unpause contract (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpauseContract(params: CallParams<IdentityRegistryArgs['obj']['unpause_contract()bool'] | IdentityRegistryArgs['tuple']['unpause_contract()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause_contract()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_admin()address ABI method
   *
   * Get current admin address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAdmin(params: CallParams<IdentityRegistryArgs['obj']['get_admin()address'] | IdentityRegistryArgs['tuple']['get_admin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_admin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the is_paused()bool ABI method
   *
   * Check if contract is paused
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isPaused(params: CallParams<IdentityRegistryArgs['obj']['is_paused()bool'] | IdentityRegistryArgs['tuple']['is_paused()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_paused()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Simple test method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<IdentityRegistryArgs['obj']['hello(string)string'] | IdentityRegistryArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the IdentityRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class IdentityRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `IdentityRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new IdentityRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new IdentityRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the IdentityRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: IdentityRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new IdentityRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IdentityRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IdentityRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IdentityRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new IdentityRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the IdentityRegistry smart contract
 */
export class IdentityRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `IdentityRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the IdentityRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `IdentityRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends IdentityRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `IdentityRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<IdentityRegistryClient> {
    return new IdentityRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `IdentityRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<IdentityRegistryClient> {
    return new IdentityRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the IdentityRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `register_identity(address,uint64)bool` ABI method.
     *
     * Register a user's identity with verification level
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if registration successful
     */
    registerIdentity: (params: CallParams<IdentityRegistryArgs['obj']['register_identity(address,uint64)bool'] | IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.registerIdentity(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `verify_identity(address)bool` ABI method.
     *
     * Check if a user is verified (simplified for MVP)
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if verified
     */
    verifyIdentity: (params: CallParams<IdentityRegistryArgs['obj']['verify_identity(address)bool'] | IdentityRegistryArgs['tuple']['verify_identity(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.verifyIdentity(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `get_total_verified_users()uint64` ABI method.
     *
     * Get total number of verified users
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalVerifiedUsers: (params: CallParams<IdentityRegistryArgs['obj']['get_total_verified_users()uint64'] | IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.getTotalVerifiedUsers(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `set_admin(address)bool` ABI method.
     *
     * Transfer admin rights (current admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if successful
     */
    setAdmin: (params: CallParams<IdentityRegistryArgs['obj']['set_admin(address)bool'] | IdentityRegistryArgs['tuple']['set_admin(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.setAdmin(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseContract: (params: CallParams<IdentityRegistryArgs['obj']['pause_contract()bool'] | IdentityRegistryArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.pauseContract(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `unpause_contract()bool` ABI method.
     *
     * Unpause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpauseContract: (params: CallParams<IdentityRegistryArgs['obj']['unpause_contract()bool'] | IdentityRegistryArgs['tuple']['unpause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.unpauseContract(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `get_admin()address` ABI method.
     *
     * Get current admin address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAdmin: (params: CallParams<IdentityRegistryArgs['obj']['get_admin()address'] | IdentityRegistryArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.getAdmin(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `is_paused()bool` ABI method.
     *
     * Check if contract is paused
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isPaused: (params: CallParams<IdentityRegistryArgs['obj']['is_paused()bool'] | IdentityRegistryArgs['tuple']['is_paused()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.isPaused(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `hello(string)string` ABI method.
     *
     * Simple test method
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<IdentityRegistryArgs['obj']['hello(string)string'] | IdentityRegistryArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IdentityRegistryParamsFactory.hello(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the IdentityRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `register_identity(address,uint64)bool` ABI method.
     *
     * Register a user's identity with verification level
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if registration successful
     */
    registerIdentity: (params: CallParams<IdentityRegistryArgs['obj']['register_identity(address,uint64)bool'] | IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.registerIdentity(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `verify_identity(address)bool` ABI method.
     *
     * Check if a user is verified (simplified for MVP)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if verified
     */
    verifyIdentity: (params: CallParams<IdentityRegistryArgs['obj']['verify_identity(address)bool'] | IdentityRegistryArgs['tuple']['verify_identity(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.verifyIdentity(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `get_total_verified_users()uint64` ABI method.
     *
     * Get total number of verified users
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalVerifiedUsers: (params: CallParams<IdentityRegistryArgs['obj']['get_total_verified_users()uint64'] | IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.getTotalVerifiedUsers(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `set_admin(address)bool` ABI method.
     *
     * Transfer admin rights (current admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if successful
     */
    setAdmin: (params: CallParams<IdentityRegistryArgs['obj']['set_admin(address)bool'] | IdentityRegistryArgs['tuple']['set_admin(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.setAdmin(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseContract: (params: CallParams<IdentityRegistryArgs['obj']['pause_contract()bool'] | IdentityRegistryArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.pauseContract(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `unpause_contract()bool` ABI method.
     *
     * Unpause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpauseContract: (params: CallParams<IdentityRegistryArgs['obj']['unpause_contract()bool'] | IdentityRegistryArgs['tuple']['unpause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.unpauseContract(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `get_admin()address` ABI method.
     *
     * Get current admin address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAdmin: (params: CallParams<IdentityRegistryArgs['obj']['get_admin()address'] | IdentityRegistryArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.getAdmin(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `is_paused()bool` ABI method.
     *
     * Check if contract is paused
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isPaused: (params: CallParams<IdentityRegistryArgs['obj']['is_paused()bool'] | IdentityRegistryArgs['tuple']['is_paused()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.isPaused(params))
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `hello(string)string` ABI method.
     *
     * Simple test method
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<IdentityRegistryArgs['obj']['hello(string)string'] | IdentityRegistryArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IdentityRegistryParamsFactory.hello(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the IdentityRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `register_identity(address,uint64)bool` ABI method.
     *
     * Register a user's identity with verification level
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if registration successful
     */
    registerIdentity: async (params: CallParams<IdentityRegistryArgs['obj']['register_identity(address,uint64)bool'] | IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.registerIdentity(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['register_identity(address,uint64)bool'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `verify_identity(address)bool` ABI method.
     *
     * Check if a user is verified (simplified for MVP)
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if verified
     */
    verifyIdentity: async (params: CallParams<IdentityRegistryArgs['obj']['verify_identity(address)bool'] | IdentityRegistryArgs['tuple']['verify_identity(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.verifyIdentity(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['verify_identity(address)bool'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `get_total_verified_users()uint64` ABI method.
     *
     * Get total number of verified users
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalVerifiedUsers: async (params: CallParams<IdentityRegistryArgs['obj']['get_total_verified_users()uint64'] | IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.getTotalVerifiedUsers(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['get_total_verified_users()uint64'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `set_admin(address)bool` ABI method.
     *
     * Transfer admin rights (current admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if successful
     */
    setAdmin: async (params: CallParams<IdentityRegistryArgs['obj']['set_admin(address)bool'] | IdentityRegistryArgs['tuple']['set_admin(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.setAdmin(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['set_admin(address)bool'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseContract: async (params: CallParams<IdentityRegistryArgs['obj']['pause_contract()bool'] | IdentityRegistryArgs['tuple']['pause_contract()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.pauseContract(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['pause_contract()bool'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `unpause_contract()bool` ABI method.
     *
     * Unpause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpauseContract: async (params: CallParams<IdentityRegistryArgs['obj']['unpause_contract()bool'] | IdentityRegistryArgs['tuple']['unpause_contract()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.unpauseContract(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['unpause_contract()bool'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `get_admin()address` ABI method.
     *
     * Get current admin address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAdmin: async (params: CallParams<IdentityRegistryArgs['obj']['get_admin()address'] | IdentityRegistryArgs['tuple']['get_admin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.getAdmin(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['get_admin()address'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `is_paused()bool` ABI method.
     *
     * Check if contract is paused
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isPaused: async (params: CallParams<IdentityRegistryArgs['obj']['is_paused()bool'] | IdentityRegistryArgs['tuple']['is_paused()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.isPaused(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['is_paused()bool'])}
    },

    /**
     * Makes a call to the IdentityRegistry smart contract using the `hello(string)string` ABI method.
     *
     * Simple test method
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<IdentityRegistryArgs['obj']['hello(string)string'] | IdentityRegistryArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IdentityRegistryParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | IdentityRegistryReturns['hello(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new IdentityRegistryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current IdentityRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current IdentityRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          totalVerifiedUsers: result.total_verified_users,
          contractPaused: result.contract_paused,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the total_verified_users key in global state
       */
      totalVerifiedUsers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_verified_users")) as bigint | undefined },
      /**
       * Get the current value of the contract_paused key in global state
       */
      contractPaused: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("contract_paused")) as boolean | undefined },
    },
  }

  public newGroup(): IdentityRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register_identity(address,uint64)bool method call against the IdentityRegistry contract
       */
      registerIdentity(params: CallParams<IdentityRegistryArgs['obj']['register_identity(address,uint64)bool'] | IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerIdentity(params)))
        resultMappers.push((v) => client.decodeReturnValue('register_identity(address,uint64)bool', v))
        return this
      },
      /**
       * Add a verify_identity(address)bool method call against the IdentityRegistry contract
       */
      verifyIdentity(params: CallParams<IdentityRegistryArgs['obj']['verify_identity(address)bool'] | IdentityRegistryArgs['tuple']['verify_identity(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyIdentity(params)))
        resultMappers.push((v) => client.decodeReturnValue('verify_identity(address)bool', v))
        return this
      },
      /**
       * Add a get_total_verified_users()uint64 method call against the IdentityRegistry contract
       */
      getTotalVerifiedUsers(params: CallParams<IdentityRegistryArgs['obj']['get_total_verified_users()uint64'] | IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalVerifiedUsers(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_verified_users()uint64', v))
        return this
      },
      /**
       * Add a set_admin(address)bool method call against the IdentityRegistry contract
       */
      setAdmin(params: CallParams<IdentityRegistryArgs['obj']['set_admin(address)bool'] | IdentityRegistryArgs['tuple']['set_admin(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('set_admin(address)bool', v))
        return this
      },
      /**
       * Add a pause_contract()bool method call against the IdentityRegistry contract
       */
      pauseContract(params: CallParams<IdentityRegistryArgs['obj']['pause_contract()bool'] | IdentityRegistryArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_contract()bool', v))
        return this
      },
      /**
       * Add a unpause_contract()bool method call against the IdentityRegistry contract
       */
      unpauseContract(params: CallParams<IdentityRegistryArgs['obj']['unpause_contract()bool'] | IdentityRegistryArgs['tuple']['unpause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpauseContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('unpause_contract()bool', v))
        return this
      },
      /**
       * Add a get_admin()address method call against the IdentityRegistry contract
       */
      getAdmin(params: CallParams<IdentityRegistryArgs['obj']['get_admin()address'] | IdentityRegistryArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_admin()address', v))
        return this
      },
      /**
       * Add a is_paused()bool method call against the IdentityRegistry contract
       */
      isPaused(params: CallParams<IdentityRegistryArgs['obj']['is_paused()bool'] | IdentityRegistryArgs['tuple']['is_paused()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isPaused(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_paused()bool', v))
        return this
      },
      /**
       * Add a hello(string)string method call against the IdentityRegistry contract
       */
      hello(params: CallParams<IdentityRegistryArgs['obj']['hello(string)string'] | IdentityRegistryArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a clear state call to the IdentityRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as IdentityRegistryComposer
  }
}
export type IdentityRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register_identity(address,uint64)bool ABI method.
   *
   * Register a user's identity with verification level
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerIdentity(params?: CallParams<IdentityRegistryArgs['obj']['register_identity(address,uint64)bool'] | IdentityRegistryArgs['tuple']['register_identity(address,uint64)bool']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['register_identity(address,uint64)bool'] | undefined]>

  /**
   * Calls the verify_identity(address)bool ABI method.
   *
   * Check if a user is verified (simplified for MVP)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyIdentity(params?: CallParams<IdentityRegistryArgs['obj']['verify_identity(address)bool'] | IdentityRegistryArgs['tuple']['verify_identity(address)bool']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['verify_identity(address)bool'] | undefined]>

  /**
   * Calls the get_total_verified_users()uint64 ABI method.
   *
   * Get total number of verified users
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalVerifiedUsers(params?: CallParams<IdentityRegistryArgs['obj']['get_total_verified_users()uint64'] | IdentityRegistryArgs['tuple']['get_total_verified_users()uint64']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['get_total_verified_users()uint64'] | undefined]>

  /**
   * Calls the set_admin(address)bool ABI method.
   *
   * Transfer admin rights (current admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAdmin(params?: CallParams<IdentityRegistryArgs['obj']['set_admin(address)bool'] | IdentityRegistryArgs['tuple']['set_admin(address)bool']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['set_admin(address)bool'] | undefined]>

  /**
   * Calls the pause_contract()bool ABI method.
   *
   * Pause contract (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseContract(params?: CallParams<IdentityRegistryArgs['obj']['pause_contract()bool'] | IdentityRegistryArgs['tuple']['pause_contract()bool']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['pause_contract()bool'] | undefined]>

  /**
   * Calls the unpause_contract()bool ABI method.
   *
   * Unpause contract (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpauseContract(params?: CallParams<IdentityRegistryArgs['obj']['unpause_contract()bool'] | IdentityRegistryArgs['tuple']['unpause_contract()bool']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['unpause_contract()bool'] | undefined]>

  /**
   * Calls the get_admin()address ABI method.
   *
   * Get current admin address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAdmin(params?: CallParams<IdentityRegistryArgs['obj']['get_admin()address'] | IdentityRegistryArgs['tuple']['get_admin()address']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['get_admin()address'] | undefined]>

  /**
   * Calls the is_paused()bool ABI method.
   *
   * Check if contract is paused
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isPaused(params?: CallParams<IdentityRegistryArgs['obj']['is_paused()bool'] | IdentityRegistryArgs['tuple']['is_paused()bool']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['is_paused()bool'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * Simple test method
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<IdentityRegistryArgs['obj']['hello(string)string'] | IdentityRegistryArgs['tuple']['hello(string)string']>): IdentityRegistryComposer<[...TReturns, IdentityRegistryReturns['hello(string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the IdentityRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): IdentityRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): IdentityRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<IdentityRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<IdentityRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<IdentityRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<IdentityRegistryComposerResults<TReturns>>
}
export type IdentityRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

