/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PaymentProcessor","structs":{},"methods":[{"name":"process_payment","args":[{"type":"address","name":"recipient"},{"type":"uint64","name":"amount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Process a payment","events":[],"recommendations":{}},{"name":"get_total_payments","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total payments processed","events":[],"recommendations":{}},{"name":"get_admin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get admin address","events":[],"recommendations":{}},{"name":"pause_contract","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause contract (admin only)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Payment Processor for ChainID+Comply","networks":{},"state":{"schema":{"global":{"ints":1,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"total_payments_processed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcGF5bWVudHNfcHJvY2Vzc2Vk"},"contract_paused":{"keyType":"AVMString","valueType":"bool","key":"Y29udHJhY3RfcGF1c2Vk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[214],"errorMessage":"Contract paused"},{"pc":[231],"errorMessage":"Invalid amount"},{"pc":[123,139,155,172],"errorMessage":"OnCompletion is not NoOp"},{"pc":[265],"errorMessage":"Only admin"},{"pc":[200],"errorMessage":"can only call when creating"},{"pc":[126,142,158,175],"errorMessage":"can only call when not creating"},{"pc":[256,261],"errorMessage":"check self.admin exists"},{"pc":[209],"errorMessage":"check self.contract_paused exists"},{"pc":[235,251],"errorMessage":"check self.total_payments_processed exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmBRh0b3RhbF9wYXltZW50c19wcm9jZXNzZWQEFR98dQVhZG1pbg9jb250cmFjdF9wYXVzZWQBgDEYQAAMKjIJZygiZyuAAQBnMRtBAG2CBASPpDazBJSJ1CoENGs9vASbHcSLNhoAjgQAMwAiABIAAiJDMRkURDEYRIgAgClMULAjQzEZFEQxGESIAGspTFCwI0MxGRREMRhEiABWFilMULAjQzEZFEQxGEQ2GgE2GgIXiAARKUxQsCNDMRlA/7ExGBREI0OKAgEiK2VEgAEAEkSL/0EAGIv/gcCEPQ5BAA4jRCIoZUQjCChMZycEiSJC/+8iKGVEiSIqZUSJIiplRDEAEkQrJwRnJwSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PaymentProcessor contract
 */
export type PaymentProcessorArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'process_payment(address,uint64)bool': {
      recipient: string
      amount: bigint | number
    }
    'get_total_payments()uint64': Record<string, never>
    'get_admin()address': Record<string, never>
    'pause_contract()bool': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'process_payment(address,uint64)bool': [recipient: string, amount: bigint | number]
    'get_total_payments()uint64': []
    'get_admin()address': []
    'pause_contract()bool': []
  }
}

/**
 * The return type for each method
 */
export type PaymentProcessorReturns = {
  'process_payment(address,uint64)bool': boolean
  'get_total_payments()uint64': bigint
  'get_admin()address': string
  'pause_contract()bool': boolean
}

/**
 * Defines the types of available calls and state of the PaymentProcessor smart contract.
 */
export type PaymentProcessorTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'process_payment(address,uint64)bool' | 'process_payment', {
      argsObj: PaymentProcessorArgs['obj']['process_payment(address,uint64)bool']
      argsTuple: PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']
      returns: PaymentProcessorReturns['process_payment(address,uint64)bool']
    }>
    & Record<'get_total_payments()uint64' | 'get_total_payments', {
      argsObj: PaymentProcessorArgs['obj']['get_total_payments()uint64']
      argsTuple: PaymentProcessorArgs['tuple']['get_total_payments()uint64']
      returns: PaymentProcessorReturns['get_total_payments()uint64']
    }>
    & Record<'get_admin()address' | 'get_admin', {
      argsObj: PaymentProcessorArgs['obj']['get_admin()address']
      argsTuple: PaymentProcessorArgs['tuple']['get_admin()address']
      returns: PaymentProcessorReturns['get_admin()address']
    }>
    & Record<'pause_contract()bool' | 'pause_contract', {
      argsObj: PaymentProcessorArgs['obj']['pause_contract()bool']
      argsTuple: PaymentProcessorArgs['tuple']['pause_contract()bool']
      returns: PaymentProcessorReturns['pause_contract()bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        totalPaymentsProcessed: bigint
        contractPaused: boolean
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PaymentProcessorSignatures = keyof PaymentProcessorTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PaymentProcessorNonVoidMethodSignatures = keyof PaymentProcessorTypes['methods'] extends infer T ? T extends keyof PaymentProcessorTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PaymentProcessor smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PaymentProcessorSignatures> = PaymentProcessorTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PaymentProcessor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PaymentProcessorSignatures> = PaymentProcessorTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PaymentProcessorTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PaymentProcessorCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PaymentProcessorDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PaymentProcessorCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PaymentProcessor smart contract
 */
export abstract class PaymentProcessorParamsFactory {
  /**
   * Constructs a no op call for the process_payment(address,uint64)bool ABI method
   *
   * Process a payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static processPayment(params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'process_payment(address,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_total_payments()uint64 ABI method
   *
   * Get total payments processed
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalPayments(params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_payments()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_admin()address ABI method
   *
   * Get admin address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAdmin(params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_admin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the pause_contract()bool ABI method
   *
   * Pause contract (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseContract(params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pause_contract()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PaymentProcessor smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PaymentProcessorFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PaymentProcessorFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PaymentProcessorClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PaymentProcessorClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PaymentProcessor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PaymentProcessorDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PaymentProcessorClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PaymentProcessor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PaymentProcessor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PaymentProcessor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PaymentProcessorClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PaymentProcessor smart contract
 */
export class PaymentProcessorClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PaymentProcessorClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PaymentProcessor app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PaymentProcessorClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PaymentProcessorNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PaymentProcessorClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PaymentProcessorClient> {
    return new PaymentProcessorClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PaymentProcessorClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PaymentProcessorClient> {
    return new PaymentProcessorClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `process_payment(address,uint64)bool` ABI method.
     *
     * Process a payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    processPayment: (params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.processPayment(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_total_payments()uint64` ABI method.
     *
     * Get total payments processed
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalPayments: (params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.getTotalPayments(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_admin()address` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAdmin: (params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.getAdmin(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseContract: (params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PaymentProcessorParamsFactory.pauseContract(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `process_payment(address,uint64)bool` ABI method.
     *
     * Process a payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    processPayment: (params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.processPayment(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_total_payments()uint64` ABI method.
     *
     * Get total payments processed
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalPayments: (params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.getTotalPayments(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_admin()address` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAdmin: (params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.getAdmin(params))
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseContract: (params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PaymentProcessorParamsFactory.pauseContract(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `process_payment(address,uint64)bool` ABI method.
     *
     * Process a payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    processPayment: async (params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.processPayment(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['process_payment(address,uint64)bool'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_total_payments()uint64` ABI method.
     *
     * Get total payments processed
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalPayments: async (params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.getTotalPayments(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['get_total_payments()uint64'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `get_admin()address` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAdmin: async (params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.getAdmin(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['get_admin()address'])}
    },

    /**
     * Makes a call to the PaymentProcessor smart contract using the `pause_contract()bool` ABI method.
     *
     * Pause contract (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseContract: async (params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PaymentProcessorParamsFactory.pauseContract(params))
      return {...result, return: result.return as unknown as (undefined | PaymentProcessorReturns['pause_contract()bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PaymentProcessorClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PaymentProcessor app
   */
  state = {
    /**
     * Methods to access global state for the current PaymentProcessor app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          totalPaymentsProcessed: result.total_payments_processed,
          contractPaused: result.contract_paused,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the total_payments_processed key in global state
       */
      totalPaymentsProcessed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_payments_processed")) as bigint | undefined },
      /**
       * Get the current value of the contract_paused key in global state
       */
      contractPaused: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("contract_paused")) as boolean | undefined },
    },
  }

  public newGroup(): PaymentProcessorComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a process_payment(address,uint64)bool method call against the PaymentProcessor contract
       */
      processPayment(params: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.processPayment(params)))
        resultMappers.push((v) => client.decodeReturnValue('process_payment(address,uint64)bool', v))
        return this
      },
      /**
       * Add a get_total_payments()uint64 method call against the PaymentProcessor contract
       */
      getTotalPayments(params: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalPayments(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_payments()uint64', v))
        return this
      },
      /**
       * Add a get_admin()address method call against the PaymentProcessor contract
       */
      getAdmin(params: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_admin()address', v))
        return this
      },
      /**
       * Add a pause_contract()bool method call against the PaymentProcessor contract
       */
      pauseContract(params: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('pause_contract()bool', v))
        return this
      },
      /**
       * Add a clear state call to the PaymentProcessor contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PaymentProcessorComposer
  }
}
export type PaymentProcessorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the process_payment(address,uint64)bool ABI method.
   *
   * Process a payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  processPayment(params?: CallParams<PaymentProcessorArgs['obj']['process_payment(address,uint64)bool'] | PaymentProcessorArgs['tuple']['process_payment(address,uint64)bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['process_payment(address,uint64)bool'] | undefined]>

  /**
   * Calls the get_total_payments()uint64 ABI method.
   *
   * Get total payments processed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalPayments(params?: CallParams<PaymentProcessorArgs['obj']['get_total_payments()uint64'] | PaymentProcessorArgs['tuple']['get_total_payments()uint64']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['get_total_payments()uint64'] | undefined]>

  /**
   * Calls the get_admin()address ABI method.
   *
   * Get admin address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAdmin(params?: CallParams<PaymentProcessorArgs['obj']['get_admin()address'] | PaymentProcessorArgs['tuple']['get_admin()address']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['get_admin()address'] | undefined]>

  /**
   * Calls the pause_contract()bool ABI method.
   *
   * Pause contract (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseContract(params?: CallParams<PaymentProcessorArgs['obj']['pause_contract()bool'] | PaymentProcessorArgs['tuple']['pause_contract()bool']>): PaymentProcessorComposer<[...TReturns, PaymentProcessorReturns['pause_contract()bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PaymentProcessor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PaymentProcessorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PaymentProcessorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PaymentProcessorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PaymentProcessorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PaymentProcessorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PaymentProcessorComposerResults<TReturns>>
}
export type PaymentProcessorComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

